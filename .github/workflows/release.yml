name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build Release for ${{ matrix.target.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target:
              name: x86_64-linux
              triple: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            cross: false
            binary_name: prompt-color-tool
            asset_name: prompt-color-tool-x86_64-linux
          
          - target:
              name: armv7-linux
              triple: armv7-unknown-linux-gnueabihf
            os: ubuntu-latest
            cross: true
            binary_name: prompt-color-tool
            asset_name: prompt-color-tool-armv7-linux
          
          - target:
              name: aarch64-linux
              triple: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            cross: true
            binary_name: prompt-color-tool
            asset_name: prompt-color-tool-aarch64-linux
          
          - target:
              name: aarch64-macos
              triple: aarch64-apple-darwin
            os: macos-latest
            cross: false
            binary_name: prompt-color-tool
            asset_name: prompt-color-tool-aarch64-macos

    steps:
      - uses: actions/checkout@v3
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target.triple }}
          override: true
      
      - name: Install cross (for cross-compilation)
        if: matrix.cross
        run: cargo install cross
      
      - name: Build with cargo (native)
        if: ${{ !matrix.cross }}
        run: cargo build --release --verbose --target ${{ matrix.target.triple }}
      
      - name: Build with cross (cross-compile)
        if: matrix.cross
        run: cross build --release --verbose --target ${{ matrix.target.triple }}
      
      - name: Prepare binary (Linux)
        if: contains(matrix.os, 'ubuntu')
        run: |
          cd target/${{ matrix.target.triple }}/release
          ls -alR
          strip ${{ matrix.binary_name }} || true
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          echo "ASSET_PATH=target/${{ matrix.target.triple }}/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
      
      - name: Prepare binary (macOS)
        if: contains(matrix.os, 'macos')
        run: |
          cd target/${{ matrix.target.triple }}/release
          ls -alR
          strip ${{ matrix.binary_name }} || true
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          echo "ASSET_PATH=target/${{ matrix.target.triple }}/release/${{ matrix.asset_name }}.tar.gz" >> $GITHUB_ENV
      
      - name: Upload Release Asset
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ${{ env.ASSET_PATH }}
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Prepare artifacts for release
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "*.tar.gz" -exec cp {} release-assets/ \;
          ls -la release-assets/
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false
          files: release-assets/*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
